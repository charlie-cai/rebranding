import Nimble
import Quick
import SwiftUI

@testable import DesignKit

class ColorExtensionSpec: QuickSpec {
  override func spec() {
    describe("SwiftUI Color extensions") {
      let go = Color.go
      let colors = [
<% it.colors.forEach(function(color){ %>
        go.<%= it.func.camelCaseFromHyphenCase(color.name) %>,
<% }) %>
      ]
      
      it("should have its coresponding color") {
        colors.forEach { color in
          expect(color).to(beAKindOf(Color.self))
        }
      }
      it("Should get corresponding UIColor from a SwiftUI Color") {
        colors.forEach { color in
          expect(color.toUIColor).to(beAKindOf(UIColor.self))
        }
      }
    }
    
    describe("UIColor extensions") {
      let go = UIColor.go
      let uiColors = [
<% it.colors.forEach(function(color){ %>
        go.<%= it.func.camelCaseFromHyphenCase(color.name) %>,
<% }) %>
      ]
      
      it("should have its coresponding UIColor") {
        uiColors.forEach { uiColor in
          expect(uiColor).to(beAKindOf(UIColor.self))
        }
      }
      it("Should get corresponding SwiftUI Color from an UIColor") {
        uiColors.forEach { uiColor in
         expect(uiColor.toColor).to(beAKindOf(Color.self))
        }
      }
    }
    
    describe("Legacy SwiftUI Color extensions") {
      it("should have its coresponding color") {
        let lite = Color.lite
        let colors = [
          lite.primaryText,
          lite.background,
          lite.secondaryBackground,
          lite.actionPrimaryVariantUnselected,
          lite.actionPrimaryVariant,
          lite.actionPrimaryVariantBlue,
          lite.tabBarBackground,
          lite.tabBarBarTint,
          lite.tabBarTint,
          lite.tabBarUnselectedItemTint,
          lite.tabShadow,
          lite.divider,
          lite.tertiaryText,
          lite.disabledText,
          lite.buttonText,
          lite.inputFieldBorder,
          lite.secondaryButtonText,
          lite.navButtonText,
          lite.foreground,
          lite.foregroundUniversal,
          lite.buttonBorder,
          lite.secondaryText,
          lite.segmentControlSeperator,
          lite.primaryTextBaseForeground,
          lite.baseForegroundUndecided,
          lite.primaryTextTeriaryText,
          lite.actionSheetTouchBar,
          lite.negativeText,
          lite.outline,
          lite.placeholderText,
          lite.statusDraft,
          lite.statusSent,
          lite.statusOverdue,
          lite.statusPaid,
          lite.statusViewed,
          lite.statusWarningAccent,
          lite.stripeLogoBackground,
          lite.stripePurple,
          lite.lightBlueBackground,
          lite.formBorder,
          lite.lightGrayBackground,
          lite.lightGrayText,
          lite.inputText,
          lite.inputCursor,
          lite.whiteBackground,
          lite.dottedLine,
          lite.attachmentTitle,
          lite.attachmentBackground,
          lite.categoryTitle,
          lite.categoryImageBackground,
          lite.actionBlue,
          lite.actionRed,
          lite.attachementActionBackground,
          lite.errorText,
          lite.statusLightGrayBackground,
          lite.baseBackground,
          lite.baseForegroundDropShadow,
          lite.baseForeground,
          lite.unselectedBar,
          lite.tertiaryReversed,
          lite.secondaryTextUniversal,
          lite.shadow,
          lite.lightGrayBackgroundDisabled,
          lite.lightGrayDisabledTitle,
          lite.lightGrayDisabledText,
          lite.statusBarBackground
        ]
        colors.forEach { color in
          expect(color).to(beAKindOf(Color.self))
        }
      }
      it("Should get corresponding SwiftUI Color from a UIColor") {
        expect(UIColor.lite.baseForegroundUndecided.toColor).to(beAKindOf(Color.self))
      }
      it("Should get corresponding UIColor from a SwiftUI Color") {
        expect(Color.lite.baseForegroundUndecided.toUIColor).to(beAKindOf(UIColor.self))
      }
    }
  }
}
