import Nimble
import Quick
import SwiftUI

@testable import DesignKit

class ColorExtensionSpec: QuickSpec {
  override func spec() {
    describe("SwiftUI Color extensions") {
      let go = Color.go
      let colors = [
<% it.semantic_colors.forEach(function(semantic_color){ %>
        go.<%= it.func.camelCaseFromHyphenCase(semantic_color.name) %>,
<% }) %>
      ]
      
      it("should have its coresponding color") {
        colors.forEach { color in
          expect(color).to(beAKindOf(Color.self))
        }
      }
      it("Should get corresponding UIColor from a SwiftUI Color") {
        colors.forEach { color in
          expect(color.toUIColor).to(beAKindOf(UIColor.self))
        }
      }
    }
    
    describe("UIColor extensions") {
      let go = UIColor.go
      let uiColors = [
<% it.semantic_colors.forEach(function(semantic_color){ %>
        go.<%= it.func.camelCaseFromHyphenCase(semantic_color.name) %>,
<% }) %>
      ]
      
      it("should have its coresponding UIColor") {
        uiColors.forEach { uiColor in
          expect(uiColor).to(beAKindOf(UIColor.self))
        }
      }
      it("Should get corresponding SwiftUI Color from an UIColor") {
        uiColors.forEach { uiColor in
         expect(uiColor.toColor).to(beAKindOf(Color.self))
        }
      }
    }
  }
}
